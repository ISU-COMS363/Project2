# WARNING: replace infile path's with valid path to xml files.
# Drop all tables at beginning
drop table Enrollment; drop Table Offering; drop table Course; drop table Student; drop table Instructor; drop table Person;

# Item 1: Create Person table
create table Person (
Name char (20),
ID char (9) not null,
Address char (30),
DOB date,
Primary key (ID));

# Item 2: Create Instructor Table
create table Instructor(
InstructorID char(9) not null,
Rank char(12),
Salary int,
Primary key (InstructorID),
Foreign key (InstructorID) references Person(ID)
);

# Item 3: Create Student Table
create table Student(
StudentID char(9) not null,
MentorID char(9) references Instructor(InstructorID),
Classification char(10),
GPA double,
CreditHours int,
Primary key (StudentID),
Foreign key (StudentID) references Person(ID)
);

# Item 4: Create Course Table
create table Course(
CourseCode char(6) not null,
CourseName char(50),
PreReq char(6)
);

# Item 5: Create Offering Table
create table Offering(
CourseCode char(6) not null,
SectionNo int not null,
InstructorID char(9) not null references Instructor(InstructorID),
Primary key(CourseCode, SectionNo)
);

# Item 6: Create Enrollment Table
create table Enrollment (
CourseCode char(6) NOT NULL,
SectionNo int NOT NULL,
StudentID char(9) NOT NULL references Student,
Grade char(4) NOT NULL,
primary key (CourseCode, StudentID),
foreign key (CourseCode, SectionNo) references Offering(CourseCode, SectionNo)
);

# Item 7: Load Person Table
load xml local infile '/Users/josephmcgovern/Dev/COMS363/Project2/xml/Person.xml'
into table Person
rows identified by '<Person>';

# Item 8: Load Instructor Table
load xml local infile '/Users/josephmcgovern/Dev/COMS363/Project2/xml/Instructor.xml'
into table Instructor
rows identified by '<Instructor>';

# Item 9: Load Student Table
load xml local infile '/Users/josephmcgovern/Dev/COMS363/Project2/xml/Student.xml'
into table Student
rows identified by '<Student>';

# Item 10: Load Course Table
load xml local infile '/Users/josephmcgovern/Dev/COMS363/Project2/xml/Course.xml'
into table Course
rows identified by '<Course>';

# Item 11: Load Offering Table
load xml local infile '/Users/josephmcgovern/Dev/COMS363/Project2/xml/Offering.xml'
into table Offering
rows identified by '<Offering>';

# Item 12: Load Enrollment Table
load xml local infile '/Users/josephmcgovern/Dev/COMS363/Project2/xml/Enrollment.xml'
into table Enrollment
rows identified by '<Enrollment>';


# Item 13: List the IDs of students and the IDs of their Mentors for students who are junior or senior having a GPA above 3.8
select s.StudentID, s.MentorID from Student s where s.GPA > 3.8 and (s.Classification = "Senior" or s.Classification = "Junior");

# Item 14: List the distinct course codes and sections for courses that are being taken by sophomore
select distinct e.CourseCode, e.SectionNo from Enrollment e where e.StudentID in
(select s.StudentID from Student s where s.Classification = "Sophomore");

# Item 15: List the name and salary for mentors of all freshmen
select m.Salary, p.Name from Instructor m, Person p where m.InstructorID in (
    select s.MentorID from Student s where s.Classification = "Freshman") and p.ID = m.InstructorID;

# Item 16: Find the total salary of all instructors who are not offering any course
select sum(all i.Salary) from Instructor i where i.InstructorID not in (
    select o.InstructorID from Offering o);

# Item 17: List all the names and DOBs of students who were born in 1976. The expression "Year(x.DOB) = 1976", checks if x is born in the year 1976
select p.Name from Person p where Year(p.DOB) = "1976" and p.ID in (
    select s.StudentID from Student s);

# Item 18: List the names and rank of instructors who neither offer a course nor mentor a student -- doesn't return any results
select p.Name, i.Rank from Person p, Instructor i where i.InstructorID not in (
    select o.InstructorID from Offering o) and i.InstructorID not in (
        select s.MentorID from Student s) and p.ID = i.InstructorID;

# Item 19: Find the IDs, names and DOB of the youngest student(s)
select p.ID, p.Name, p.DOB from Person p where p.ID in (
    select s.StudentID from Student s) and p.DOB = (
        select MIN(p2.DOB) from Person p2);

# Item 20: List the IDs, DOB, and Names of Persons who are neither a student nor a instructor
select p.ID, p.DOB, p.Name from Person p where p.ID not in (
    select s.StudentID from Student s) and p.ID not in (
        select i.InstructorID from Instructor i);

# Item 21: For each instructor list his / her name and the number of students he / she mentors
select p.Name, count(s.MentorID) from Person p left join Student s on s.MentorID = p.ID where p.ID in (
    select i.InstructorID from Instructor i) group by p.Name;

# Item 22: List the number of students and average GPA for each classification. Your query should not use constants such as "Freshman"
select avg(s.GPA), count(s.StudentID), s.classification from Student s group by s.classification;

# Item 23: Report the course(s) with lowest enrollments. You should output the course code and the number of enrollments.
select e.CourseCode, count(e.CourseCode) as enrollmentcount from Enrollment e group by e.CourseCode having enrollmentcount <= (
    select MIN(mycount) from (
        select count(e2.CourseCode) as mycount from Enrollment e2 group by e2.CourseCode) as t2);

# Item 24: List the IDs and Mentor IDs of students who are taking some course, offered by their mentor
select distinct e.StudentID, o.InstructorID from Enrollment e, Offering o where o.InstructorID = (
    select s.MentorID from Student s where s.StudentID = e.StudentID);

# Item 25: List the student id, name, and completed credit hours of all freshman born in or after 1976
select s.StudentID, p.Name, s.CreditHours from Student s, Person p where s.StudentID = p.ID and Year(p.DOB) >= "1976" and s.Classification = "Freshman";

# Item 26: Insert following information in the database: Student name: Briggs Jason; ID: 480293439; address: 215, North Hyland Avenue; date of birth: 15th January 1975. He is a junior with a GPA of 3.48 and with 75 credit hours. His mentor is the instructor with InstructorID 201586985. Jason Briggs is taking two courses CS311 Section 2 and CS330 Section 1. He has an ’A’ on CS311 and ’A-’ on CS330.
insert into Person(Name, ID, Address, DOB) values(
    "Briggs Jason", "480293439", "215, North Hyland Avenue", "1975-01-15");
insert into Student(GPA, Classification, CreditHours, StudentID, MentorID) values(
    3.48, "Junior", 75, "480293439", "201586985");
insert into Enrollment(CourseCode, SectionNo, StudentID, Grade) values(
    "CS311", 2, "480293439", "A");
insert into Enrollment(CourseCode, SectionNo, StudentID, Grade) values(
    "CS330", 1, "480293439", "A-");
Select *
From Person P
Where P.Name= "Briggs Jason";
Select *
From Student S
Where S.StudentID= "480293439";
Select *
From Enrollment E
Where E.StudentID = "480293439";

# Item 27: Next, delete the records of students from the database who have a GPA less than 0.5. Note that it is not sufficient to delete these records from Student table; you have to delete them from the Enrollment table first. (Why?) On the  other hand, do not delete these students from the Person table.
delete from Enrollment where StudentID in (
    select s.StudentID from Student s where s.GPA < 0.5);
delete from Student where GPA < 0.5;
Select *
From Student S
Where S.GPA < 0.5;

# Item 28: update Instructor table as follows: For instructors, Ricky Ponting and Darren Lehmann, if they  five or more students whose GPA is greater than 3.0, then raise their Salary by 10%
# TODO do this?

# Item 29: Insert the following information into the Person table. Name: Trevor Horns; ID: 000957303; Address: 23 Canberra Street; date of birth: 23rd November 1964
insert into Person(Name, ID, Address, DOB) values(
    "Trevor Horns", "000957303", "23 Canberra Street", "1964-11-23");
Select *
From Person P
Where P.Name = "Trevor Horns";

# Item 30: Delete the record for Jan Austin from the Person table. If she is a student or an instructor, you should do the deletion with usual care
delete from Student where StudentID = (select p.ID from Person p where p.name = "Jan Austin");
delete from Person where Name = "Jan Austin";
Select *
From Person P
Where P.Name = "Jan Austin";
